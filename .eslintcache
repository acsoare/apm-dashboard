[{"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\index.js":"1","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\reportWebVitals.js":"2","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\App.js":"3","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\LoginScreen.js":"4","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\ResetPasswordScreen.js":"5","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\RegisterScreen.js":"6","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\PrivateScreen.js":"7","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\ForgotPasswordScreen.js":"8","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\routing\\PrivateRoute.js":"9","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\getMongoData.js":"10","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\GetData.js":"11","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\GetBackup.js":"12","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\FilterPastData.js":"13","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\models\\card_scripts.js":"14","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\FilterV2.js":"15","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\TestPrivateScreen.js":"16","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\dropdownbutton\\button.js":"17"},{"size":500,"mtime":1625042488586,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":1214,"mtime":1625512500083,"results":"21","hashOfConfig":"19"},{"size":2473,"mtime":1624613538349,"results":"22","hashOfConfig":"19"},{"size":2658,"mtime":1624612655954,"results":"23","hashOfConfig":"19"},{"size":3287,"mtime":1624612636767,"results":"24","hashOfConfig":"19"},{"size":2673,"mtime":1625512353914,"results":"25","hashOfConfig":"19"},{"size":1908,"mtime":1624612564464,"results":"26","hashOfConfig":"19"},{"size":389,"mtime":1624627234460,"results":"27","hashOfConfig":"19"},{"size":235,"mtime":1624727447375,"results":"28","hashOfConfig":"19"},{"size":3754,"mtime":1625502588214,"results":"29","hashOfConfig":"19"},{"size":7046,"mtime":1625209555684,"results":"30","hashOfConfig":"19"},{"size":19704,"mtime":1625818752684,"results":"31","hashOfConfig":"19"},{"size":981,"mtime":1625498852087,"results":"32","hashOfConfig":"19"},{"size":5400,"mtime":1625818211351,"results":"33","hashOfConfig":"19"},{"size":1385,"mtime":1625512655017,"results":"34","hashOfConfig":"19"},{"size":844,"mtime":1625581064045,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"dk8yba",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\index.js",[],["80","81"],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\reportWebVitals.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\App.js",["82"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// Routing\nimport PrivateRoute from \"./components/routing/PrivateRoute\";\n\n// Screens\nimport PrivateScreen from \"./components/screens/PrivateScreen\";\nimport TestPrivateScreen from \"./components/screens/TestPrivateScreen\";\nimport LoginScreen from \"./components/screens/LoginScreen\";\nimport RegisterScreen from \"./components/screens/RegisterScreen\";\nimport ForgotPasswordScreen from \"./components/screens/ForgotPasswordScreen\";\nimport ResetPasswordScreen from \"./components/screens/ResetPasswordScreen\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={TestPrivateScreen} />\n          <Route exact path=\"/login\" component={LoginScreen} />\n          <Route exact path=\"/register\" component={RegisterScreen} />\n          <Route\n            exact\n            path=\"/forgotpassword\"\n            component={ForgotPasswordScreen}\n          />\n\n          <Route\n            exact\n            path=\"/passwordreset/:resetToken\"\n            component={ResetPasswordScreen}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\LoginScreen.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\ResetPasswordScreen.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\RegisterScreen.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\PrivateScreen.js",["83","84","85","86","87"],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./PrivateScreen.css\";\r\nimport GetData from \"../pages/GetData\";\r\nimport FilterPastData from \"../pages/FilterPastData\";\r\nimport CardScripts from \"../models/card_scripts\";\r\nimport FilterV2 from \"../pages/FilterV2\";\r\n\r\nconst PrivateScreen = ({ history }) => {\r\n  const [error, setError] = useState(\"\");\r\n  const [privateData, setPrivateData] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n      history.push(\"login\");\r\n    }\r\n\r\n    const fetchPrivateDate = async () => {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.get(\"/api/private\", config);\r\n        setPrivateData(data.data);\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        setError(\"You are not authorized please login\");\r\n      }\r\n    };\r\n\r\n    fetchPrivateDate();\r\n  }, [history]);\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"authToken\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.charCode === 13) {\r\n      setStatus(false);\r\n      var x = document.getElementById(\"input\").value;\r\n      // console.log(x);\r\n\r\n      axios.post(\"/temp\", { x }).then(function (response) {\r\n        // console.log(response);\r\n      });\r\n    }\r\n  };\r\n\r\n  const [status, setStatus] = useState(true);\r\n  const options = [\"one\", \"two\", \"three\"];\r\n\r\n  // console.log(status);\r\n  return error ? (\r\n    <span classNameName=\"error-message\">{error}</span>\r\n  ) : (\r\n    <>\r\n      <div style={{ background: \"green\", color: \"white\" }}>{privateData}</div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <div onClick={logoutHandler} className=\"button\" id=\"button-2\">\r\n          <div id=\"slide\"></div>\r\n          Logout\r\n        </div>\r\n        <div\r\n          onClick={() => setStatus(!status)}\r\n          className=\"button\"\r\n          id=\"button-2\"\r\n        >\r\n          <div id=\"slide\"></div>\r\n          {status ? \"Search\" : \"BACK\"}\r\n        </div>\r\n      </div>\r\n\r\n      {status ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            <div>\r\n              <GetData />\r\n            </div>\r\n            <CardScripts />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        // <FilterPastData />\r\n        <FilterV2 />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateScreen;\r\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\ForgotPasswordScreen.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\getMongoData.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\GetData.js",["88"],"import React from \"react\";\r\nimport \"../pages/AllData.css\";\r\n\r\nvar axios = require(\"axios\");\r\n\r\nexport default class GetData extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    getData: null,\r\n    getDataAAAFailed: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const url =\r\n      \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/getscriptsdata-bcojx/service/getData/incoming_webhook/getdata\";\r\n\r\n    const response = await fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json,  */*\",\r\n        \"Content-type\": \"application/json, charset=utf-8\",\r\n      },\r\n    });\r\n    // console.log(response);\r\n\r\n    const data = await response.json();\r\n    // console.log(data);\r\n    this.setState({\r\n      getData: data,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading ? (\r\n          <div\r\n            style={{\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            Please wait. Data is loading.\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"containerTabelHeader\">\r\n              <div className=\"tabelID\">ID</div>\r\n              <div className=\"tabelScriptName\">Script Name</div>\r\n              <div className=\"tabelStatus\">Status</div>\r\n              <div className=\"tabelErrorDescription\">Error Description</div>\r\n              <div className=\"tabelElapsedTime\">Run Time</div>\r\n            </div>\r\n            <div className=\"tabelLastRunTime\">Last Run Time</div>\r\n\r\n            {this.state.getData.map((item, key) => {\r\n              return (\r\n                <div\r\n                  className=\"allData\"\r\n                  style={{\r\n                    background: item.status === \"GOOD\" ? \"green\" : \"red\",\r\n                  }}\r\n                  key={Math.random().toString().slice(2, 11)}\r\n                >\r\n                  <div className=\"style_script-ID\">\r\n                    <div\r\n                      key={Math.random().toString().slice(2, 11)}\r\n                      className=\"script-ID\"\r\n                    >\r\n                      {item.id.$numberInt}\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"script-Name\"\r\n                  >\r\n                    {item.scriptName}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"scriptStatus\"\r\n                  >\r\n                    {item.status}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"errorDescription\"\r\n                  >\r\n                    {item.errorDescription}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"elapsedTime\"\r\n                  >\r\n                    {item.elapsedTime.$numberDouble.substring(0, 5)} s\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"timestamp\"\r\n                  >\r\n                    {Intl.DateTimeFormat(\"en-GB\", {\r\n                      day: \"2-digit\",\r\n                      month: \"2-digit\",\r\n                      year: \"numeric\",\r\n                      hour: \"2-digit\",\r\n                      minute: \"2-digit\",\r\n                      second: \"2-digit\",\r\n                    }).format(item.time.$date.$numberLong)}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\GetBackup.js",["89","90"],"import React from \"react\";\r\nimport moment from \"moment\";\r\nvar axios = require(\"axios\");\r\n\r\nexport default class GetData extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    getData: null,\r\n    getDataAAA: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.getDataBackup();\r\n  }\r\n\r\n  async getDataBackup() {\r\n    const url =\r\n      \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/getscriptsdata-bcojx/service/pastHour/incoming_webhook/pastHour\";\r\n\r\n    const response = await fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json,  */*\",\r\n        \"Content-type\": \"application/json, charset=utf-8\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    this.setState({\r\n      getData: data,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading ? (\r\n          <div>Please wait. Data is loading.</div>\r\n        ) : (\r\n          <>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginTop: \"100px\",\r\n                marginLeft: \"20px\",\r\n                marginRight: \"20px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                ID\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Script Name\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"230px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Status\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"310px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Error Description\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"530px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Elapsed time\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginLeft: \"730px\",\r\n                marginRight: \"10px\",\r\n                position: \"relative\",\r\n                fontFamily: \"Roboto\",\r\n                fontWeight: \"700\",\r\n              }}\r\n            >\r\n              Date\r\n            </div>\r\n            {/* AICI MAPAM CE PRIMIM */}\r\n            {this.state.getData.map((item, key) => {\r\n              return (\r\n                <div\r\n                  key={Math.random().toString().slice(2, 11)}\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                    marginRight: \"20px\",\r\n                    marginTop: \"5px\",\r\n                    borderRadius: \"2em\",\r\n                    boxSizing: \"border-box\",\r\n                    fontFamily: \"Ubuntu\",\r\n                    fontWeight: \"400\",\r\n                    textAlign: \"center\",\r\n                    display: \"flex\",\r\n                    background: item.status === \"GOOD\" ? \"green\" : \"red\",\r\n                  }}\r\n                >\r\n                  <div className=\"style_script-ID\">\r\n                    <div\r\n                      key={Math.random().toString().slice(2, 11)}\r\n                      className=\"script-ID\"\r\n                      style={{\r\n                        marginLeft: \"10px\",\r\n                        marginRight: \"10px\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {item.id.$numberInt}\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"script-Name\"\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      marginRight: \"10px\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    {item.scriptName}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"scriptStatus\"\r\n                    style={{\r\n                      marginLeft: \"230px\",\r\n                      position: \"absolute\",\r\n                      marginRight: \"10px\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    {item.status}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"errorDescription\"\r\n                    style={{\r\n                      marginLeft: \"310px\",\r\n                      marginRight: \"10px\",\r\n                      position: \"absolute\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    {item.errorDescription}\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"elapsedTime\"\r\n                    style={{\r\n                      marginLeft: \"550px\",\r\n                      position: \"absolute\",\r\n                      marginRight: \"10px\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    {item.elapsedTime.$numberDouble.substring(0, 5)} s\r\n                  </div>\r\n                  <div\r\n                    key={Math.random().toString().slice(2, 11)}\r\n                    className=\"timestamp\"\r\n                    style={{\r\n                      marginLeft: \"650px\",\r\n                      position: \"absolute\",\r\n                      marginRight: \"10px\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    {Intl.DateTimeFormat(\"en-GB\", {\r\n                      day: \"2-digit\",\r\n                      month: \"2-digit\",\r\n                      year: \"numeric\",\r\n                      hour: \"2-digit\",\r\n                      minute: \"2-digit\",\r\n                      second: \"2-digit\",\r\n                    }).format(item.time.$date.$numberLong)}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["91","92"],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\FilterPastData.js",["93","94"],"import React from \"react\";\r\nimport \"../pages/FilterPastData.css\";\r\n\r\nconst {\r\n  Stitch,\r\n  RemoteMongoClient,\r\n  UserPasswordCredential,\r\n} = require(\"mongodb-stitch-browser-sdk\");\r\nconst client = Stitch.initializeDefaultAppClient(\"backup_data-fhymv\");\r\n\r\nexport default class Test extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    getData: null,\r\n    value: null,\r\n    getInputTextFromSearchBox: null,\r\n  };\r\n\r\n  //   async componentWillMount() {\r\n  //     this.getData();\r\n  //   }\r\n\r\n  async getData() {\r\n    this.setState({\r\n      getInputTextFromSearchBox: this.state.value,\r\n    });\r\n\r\n    const db = client\r\n      .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\r\n      .db(\"backup\");\r\n\r\n    var email = \"acsoare@ymail.com\";\r\n    var password = \"Underground22!!\";\r\n    const credentials = new UserPasswordCredential(\r\n      email.toString(),\r\n      password.toString()\r\n    );\r\n    var oneQuery = false;\r\n    var twoQuery = false;\r\n    var dateQuery = false;\r\n    var statusQuery = false;\r\n\r\n    var searchQuery1 = false;\r\n    var searchQuery2WithDate = false;\r\n    var searchQuery2WithStatus = false;\r\n    var searchQuery3WithStatusAndDate = false;\r\n    var searchQuery4MultipleScriptNames = false;\r\n    var searchQuery5DateWithFailed = false;\r\n\r\n    // /////////////////////////////////////////\r\n    //LOGIC FOR FILTERS, BASED ON INPUT TEXT\r\n    if (this.state.value.toString().includes(\"-\")) {\r\n      //   console.log(\"l-am gasit\");\r\n      searchQuery4MultipleScriptNames = true;\r\n    }\r\n    if (this.state.value.toString().includes(\",\")) {\r\n      if (this.state.value.toString().split(\",\")[0].length === 8) {\r\n        searchQuery5DateWithFailed = true;\r\n      }\r\n      //   console.log(this.state.value.toString());\r\n      twoQuery = true;\r\n      const afterDelimiterString = this.state.value\r\n        .toString()\r\n        .split(/,(.*)/)[1];\r\n      //   console.log(afterDelimiterString);\r\n      if (afterDelimiterString.includes(\",\")) {\r\n        searchQuery3WithStatusAndDate = true;\r\n        // console.log(\r\n        //   \"cazul 4 - DATE - STATUS - SCRIPT NAME\",\r\n        //   afterDelimiterString\r\n        // );\r\n      }\r\n      //   console.log(\"SCRIPT NAME: \", scriptNameString);\r\n      //   console.log(\"AFTER DELIMITER STRING: \", afterDelimiterString);\r\n      if (afterDelimiterString.length === 8) {\r\n        // console.log(\"DATE STRING: \", dateString);\r\n        dateQuery = true;\r\n      } else {\r\n        if (\r\n          afterDelimiterString === \"GOOD\" ||\r\n          afterDelimiterString === \"FAILED\"\r\n        ) {\r\n          statusQuery = true;\r\n        }\r\n      }\r\n    } else {\r\n      this.scriptNameString = this.state.value.toString();\r\n      oneQuery = true;\r\n    }\r\n\r\n    if (oneQuery === true) {\r\n      searchQuery1 = true;\r\n    } else {\r\n      if (twoQuery === true && dateQuery === true) {\r\n        searchQuery2WithDate = true;\r\n      } else {\r\n        if (twoQuery === true && statusQuery === true) {\r\n          searchQuery2WithStatus = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    //  END\r\n    /////////////////////////////////////////\r\n\r\n    //CONSTRUCT FINAL SEARCH QUERY BASED ON INPUT\r\n    if (searchQuery1 === true) {\r\n      var date = new Date().toISOString();\r\n      const endInterval = date.split(\"T\")[0] + \"T00:00:00.000+03:00\";\r\n      const endIntervalX = new Date(endInterval);\r\n\r\n      client.auth\r\n        .loginWithCredential(credentials)\r\n        .then(() =>\r\n          db\r\n            .collection(\"backup\")\r\n            .find(\r\n              {\r\n                scriptName: { $regex: this.state.getInputTextFromSearchBox },\r\n\r\n                time: { $gte: endIntervalX },\r\n              },\r\n\r\n              { sort: { time: -1 } },\r\n\r\n              { limit: 10 }\r\n            )\r\n\r\n            .asArray()\r\n        )\r\n        .then((data) => {\r\n          this.setState({\r\n            getData: data,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    } else {\r\n      if (searchQuery2WithDate === true) {\r\n        const finalDateQuery = this.state.value.toString().split(\",\")[1];\r\n        const DateQuerySTART =\r\n          finalDateQuery.substring(4, 8) +\r\n          \"-\" +\r\n          finalDateQuery.substring(2, 4) +\r\n          \"-\" +\r\n          finalDateQuery.substring(0, 2) +\r\n          \"T00:00:00.000+03:00\";\r\n\r\n        const DateQueryEND =\r\n          finalDateQuery.substring(4, 8) +\r\n          \"-\" +\r\n          finalDateQuery.substring(2, 4) +\r\n          \"-\" +\r\n          finalDateQuery.substring(0, 2) +\r\n          \"T23:59:59.999+03:00\";\r\n\r\n        // console.log(DateQuerySTART);\r\n        // console.log(DateQueryEND);\r\n        const startIntervalX = new Date(DateQuerySTART);\r\n        const endIntervalX = new Date(DateQueryEND);\r\n        const startInterval = startIntervalX;\r\n        const endInterval = endIntervalX;\r\n        // console.log(startInterval);\r\n        // console.log(endInterval);\r\n\r\n        client.auth\r\n          .loginWithCredential(credentials)\r\n          .then(() =>\r\n            db\r\n              .collection(\"backup\")\r\n              .find(\r\n                {\r\n                  scriptName: {\r\n                    $regex: this.state.value.toString().split(\",\")[0],\r\n                  },\r\n                  time: {\r\n                    $gte: startInterval,\r\n                    $lt: endInterval,\r\n                  },\r\n                },\r\n                { sort: { time: -1 } },\r\n                { limit: 10 }\r\n              )\r\n              .asArray()\r\n          )\r\n          .then((data) => {\r\n            this.setState({\r\n              getData: data,\r\n              loading: false,\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.error(err);\r\n          });\r\n      } else {\r\n        if (searchQuery2WithStatus === true) {\r\n          client.auth\r\n            .loginWithCredential(credentials)\r\n            .then(() =>\r\n              db\r\n                .collection(\"backup\")\r\n                .find(\r\n                  {\r\n                    scriptName: {\r\n                      $regex: this.state.value.toString().split(\",\")[0],\r\n                    },\r\n                    status: this.state.value.toString().split(\",\")[1],\r\n                  },\r\n                  { sort: { time: -1 } },\r\n                  { limit: 10 }\r\n                )\r\n                .asArray()\r\n            )\r\n            .then((data) => {\r\n              this.setState({\r\n                getData: data,\r\n                loading: false,\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n            });\r\n        } else {\r\n          if (searchQuery3WithStatusAndDate === true) {\r\n            const dateStatusQuery = this.state.value\r\n              .toString()\r\n              .split(/,(.*)/)[1];\r\n            var dateSplit = dateStatusQuery.split(\",\")[0];\r\n            var statusSplit = dateStatusQuery.split(\",\")[1];\r\n            // console.log(dateSplit);\r\n            // console.log(statusSplit);\r\n            const DateQuerySTART =\r\n              dateSplit.substring(4, 8) +\r\n              \"-\" +\r\n              dateSplit.substring(2, 4) +\r\n              \"-\" +\r\n              dateSplit.substring(0, 2) +\r\n              \"T00:00:00.000+03:00\";\r\n\r\n            const DateQueryEND =\r\n              dateSplit.substring(4, 8) +\r\n              \"-\" +\r\n              dateSplit.substring(2, 4) +\r\n              \"-\" +\r\n              dateSplit.substring(0, 2) +\r\n              \"T23:59:59.999+03:00\";\r\n\r\n            // console.log(DateQuerySTART);\r\n            // console.log(DateQueryEND);\r\n            const startIntervalX = new Date(DateQuerySTART);\r\n            const endIntervalX = new Date(DateQueryEND);\r\n            const startInterval = startIntervalX;\r\n            const endInterval = endIntervalX;\r\n            // console.log(startInterval);\r\n            // console.log(endInterval);\r\n\r\n            client.auth\r\n              .loginWithCredential(credentials)\r\n              .then(() =>\r\n                db\r\n                  .collection(\"backup\")\r\n                  .find(\r\n                    {\r\n                      scriptName: {\r\n                        $regex: this.state.value.toString().split(\",\")[0],\r\n                      },\r\n                      status: statusSplit,\r\n                      time: {\r\n                        $gte: startInterval,\r\n                        $lt: endInterval,\r\n                      },\r\n                    },\r\n                    { sort: { time: -1 } },\r\n                    { limit: 10 }\r\n                  )\r\n                  .asArray()\r\n              )\r\n              .then((data) => {\r\n                this.setState({\r\n                  getData: data,\r\n                  loading: false,\r\n                });\r\n              })\r\n              .catch((err) => {\r\n                console.error(err);\r\n              });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (searchQuery4MultipleScriptNames === true) {\r\n      let multipleValuesTemp = this.state.value.toString();\r\n\r\n      var date2 = new Date().toISOString();\r\n      const endInterval = date2.split(\"T\")[0] + \"T23:59:59.999+03:00\";\r\n      const endIntervalX = new Date(endInterval);\r\n\r\n      function addDays(theDate, days) {\r\n        return new Date(theDate.getTime() + days * 24 * 60 * 60 * 1000);\r\n      }\r\n\r\n      const startInterval =\r\n        addDays(new Date(), -1).toISOString().split(\"T\")[0] +\r\n        \"T00:00:00.000+03:00\";\r\n\r\n      const startIntervalX = new Date(startInterval);\r\n\r\n      //   console.log(startInterval);\r\n      //   console.log(endInterval);\r\n\r\n      multipleValuesTemp = multipleValuesTemp.replaceAll(\"-\", \"|^\");\r\n      //   console.log(multipleValuesTemp);\r\n      const searchForMore = \"[^\" + multipleValuesTemp + \"]\";\r\n      //   console.log(searchForMore);\r\n\r\n      client.auth\r\n        .loginWithCredential(credentials)\r\n        .then(() =>\r\n          db\r\n            .collection(\"backup\")\r\n            .find(\r\n              {\r\n                scriptName: {\r\n                  $regex: `${searchForMore}`,\r\n                  //   $regex: \"[^AAA|^AAB|^AAC]\",\r\n                },\r\n\r\n                time: {\r\n                  $gte: startIntervalX,\r\n                  $lt: endIntervalX,\r\n                },\r\n              },\r\n              { sort: { time: -1 } },\r\n              { limit: 10 }\r\n            )\r\n            .asArray()\r\n        )\r\n        .then((data) => {\r\n          this.setState({\r\n            getData: data,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }\r\n\r\n    if (searchQuery5DateWithFailed === true) {\r\n      //   console.log(\"data + FAILED\");\r\n      var datatemp =\r\n        this.state.value.toString().substring(4, 8) +\r\n        \"-\" +\r\n        this.state.value.toString().substring(2, 4) +\r\n        \"-\" +\r\n        this.state.value.toString().substring(0, 2) +\r\n        \"T00:00:00.000+03:00\";\r\n      //   console.log(datatemp);\r\n      const dataStart = datatemp;\r\n      const dataEnd =\r\n        this.state.value.toString().substring(4, 8) +\r\n        \"-\" +\r\n        this.state.value.toString().substring(2, 4) +\r\n        \"-\" +\r\n        this.state.value.toString().substring(0, 2) +\r\n        \"T23:59:59.999+03:00\";\r\n      //   console.log(dataStart, dataEnd);\r\n\r\n      //   console.log(statusQuery);\r\n\r\n      client.auth\r\n        .loginWithCredential(credentials)\r\n        .then(() =>\r\n          db\r\n            .collection(\"backup\")\r\n            .find(\r\n              {\r\n                status: \"FAILED\",\r\n\r\n                time: {\r\n                  $gte: new Date(dataStart),\r\n                  $lt: new Date(dataEnd),\r\n                },\r\n              },\r\n              { sort: { time: -1 } },\r\n              { limit: 10 }\r\n            )\r\n            .asArray()\r\n        )\r\n        .then((data) => {\r\n          this.setState({\r\n            getData: data,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }\r\n  }\r\n\r\n  // GETTING THE INPUT VALUE FROM TEXT FIELD - START\r\n  getValue = (event) => {\r\n    // console.log(\"Event: \", event.target.value);\r\n\r\n    this.setState({\r\n      value: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const value = this.state.value;\r\n    const getInputTextFromSearchBox = this.state.value;\r\n\r\n    this.getData();\r\n\r\n    // console.log(value);\r\n  };\r\n\r\n  //  GETTING THE INPUT VALUE FROM TEXT FIELD - END\r\n  render() {\r\n    // console.log(this.state.value);\r\n    return (\r\n      <>\r\n        <div>\r\n          <input\r\n            className=\"inputText\"\r\n            type=\"text\"\r\n            onBlur={this.getValue}\r\n          ></input>\r\n          <div className=\"buttonSubmit\" onClick={this.handleSubmit}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"search\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        {this.state.loading ? (\r\n          <div\r\n            style={{\r\n              color: \"black\",\r\n              position: \"absolute\",\r\n              marginLeft: \"10px\",\r\n              marginTop: \"50px\",\r\n            }}\r\n          >\r\n            Search to get query results...\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              marginTop: \"60px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginLeft: \"20px\",\r\n                marginRight: \"20px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  color: \"black\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                ID\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  color: \"black\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Script Name\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"230px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  color: \"black\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Status\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"310px\",\r\n                  marginRight: \"10px\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  color: \"black\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Error Description\r\n              </div>\r\n              <div\r\n                style={{\r\n                  marginLeft: \"530px\",\r\n                  marginRight: \"10px\",\r\n                  color: \"black\",\r\n                  position: \"absolute\",\r\n                  fontFamily: \"Roboto\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                Elapsed time\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginLeft: \"730px\",\r\n                color: \"black\",\r\n                marginRight: \"10px\",\r\n                position: \"relative\",\r\n                fontFamily: \"Roboto\",\r\n                fontWeight: \"700\",\r\n              }}\r\n            >\r\n              Date\r\n            </div>\r\n            <div>\r\n              {this.state.getData.map((item, key) => {\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      marginLeft: \"20px\",\r\n                      width: \"815px\",\r\n                      marginRight: \"20px\",\r\n                      marginTop: \"5px\",\r\n                      borderRadius: \"2em\",\r\n                      boxSizing: \"border-box\",\r\n                      fontFamily: \"Roboto\",\r\n                      fontWeight: \"400\",\r\n                      textAlign: \"center\",\r\n                      display: \"flex\",\r\n                      background: item.status === \"GOOD\" ? \"green\" : \"red\",\r\n                    }}\r\n                  >\r\n                    <div className=\"style_script-ID\">\r\n                      <div\r\n                        className=\"script-ID\"\r\n                        style={{\r\n                          marginLeft: \"10px\",\r\n                          marginRight: \"10px\",\r\n                          color: \"white\",\r\n                        }}\r\n                      >\r\n                        {item.id}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className=\"script-Name\"\r\n                      style={{\r\n                        marginLeft: \"10px\",\r\n                        marginRight: \"10px\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {item.scriptName}\r\n                    </div>\r\n                    <div\r\n                      className=\"scriptStatus\"\r\n                      style={{\r\n                        marginLeft: \"230px\",\r\n                        position: \"absolute\",\r\n                        marginRight: \"10px\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {item.status}\r\n                    </div>\r\n                    <div\r\n                      className=\"errorDescription\"\r\n                      style={{\r\n                        marginLeft: \"310px\",\r\n                        marginRight: \"10px\",\r\n                        position: \"absolute\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {item.errorDescription}\r\n                    </div>\r\n                    <div\r\n                      className=\"elapsedTime\"\r\n                      style={{\r\n                        marginLeft: \"550px\",\r\n                        position: \"absolute\",\r\n                        marginRight: \"10px\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {item.elapsedTime.toString().substring(0, 6)}s\r\n                    </div>\r\n                    <div\r\n                      className=\"timestamp\"\r\n                      style={{\r\n                        marginLeft: \"650px\",\r\n                        position: \"absolute\",\r\n                        marginRight: \"10px\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      {Intl.DateTimeFormat(\"en-GB\", {\r\n                        day: \"2-digit\",\r\n                        month: \"2-digit\",\r\n                        year: \"numeric\",\r\n                        hour: \"2-digit\",\r\n                        minute: \"2-digit\",\r\n                        second: \"2-digit\",\r\n                      }).format(item.time)}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\models\\card_scripts.js",[],"C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\pages\\FilterV2.js",["95","96"],"import React, { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Grid, Divider } from \"@material-ui/core\";\r\nimport \"./FilterV2.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GetData from \"../pages/GetData\";\r\nimport HugeData from \"../pages/FilterPastData\";\r\n\r\nexport default function HackeroneDatepicker() {\r\n  const [dateStart, setDateStart] = useState(new Date());\r\n  const [dateEnd, setDateEnd] = useState(new Date());\r\n  const [calendar, setCalendar] = useState(true);\r\n\r\n  function onChangeStartDate(dateStart) {\r\n    setDateStart(dateStart);\r\n  }\r\n  function onChangeEndDate(dateEnd) {\r\n    setDateEnd(dateEnd);\r\n  }\r\n\r\n  function handleOk() {\r\n    console.log(dateStart);\r\n    console.log(dateEnd);\r\n  }\r\n\r\n  function handleClick() {\r\n    setCalendar(!calendar);\r\n    console.log(calendar);\r\n  }\r\n\r\n  return (\r\n    <Grid container lg={12} spacing={0} item>\r\n      <Grid item md={12}>\r\n        <div className=\"header\">\r\n          <div className=\"logo\">SENTINEL</div>\r\n          <button className=\"logout\">LOGOUT</button>\r\n        </div>\r\n      </Grid>\r\n\r\n      <Grid item md={4}>\r\n        <div className=\"item1\">\r\n          <div className=\"item1_1\">Data Visualization</div>\r\n        </div>\r\n      </Grid>\r\n\r\n      <Grid item md={4}>\r\n        <div className=\"item2\">My Data</div>\r\n      </Grid>\r\n\r\n      <Grid onClick={handleClick} style={{ cursor: \"pointer\" }} item md={4}>\r\n        <div className=\"item3\">\r\n          {!calendar ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n              }}\r\n            >\r\n              <DatePicker\r\n                selected={dateStart}\r\n                onChange={onChangeStartDate}\r\n                isClearable\r\n              />\r\n              <DatePicker\r\n                selected={dateEnd}\r\n                onChange={onChangeEndDate}\r\n                isClearable\r\n              />\r\n              <button onClick={handleOk}>OK</button>\r\n            </div>\r\n          ) : null}\r\n          <svg\r\n            style={{\r\n              color: \"gray\",\r\n              width: \"30px\",\r\n              marginLeft: \"10px\",\r\n              marginRight: \"10px\",\r\n            }}\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            class=\"h-6 w-6\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n              d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n            />\r\n          </svg>\r\n          Last 24 hours\r\n          <div>\r\n            <svg\r\n              style={{\r\n                color: \"gray\",\r\n                width: \"30px\",\r\n                cursor: \"pointer\",\r\n                alignItems: \"center\",\r\n                justifyItems: \"end\",\r\n\r\n                display: \"flex\",\r\n              }}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              class=\"h-6 w-6\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"M19 9l-7 7-7-7\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={12}>\r\n        <div className=\"dashboard\">\r\n          <div>\r\n            <div className=\"dashboard_general\">\r\n              Dashboards {\" > \"} Default Dashboard\r\n            </div>\r\n            <div className=\"dashboard_apm\">APM DASHBOARD</div>\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={3}>\r\n        <div className=\"statsScripts\">\r\n          <div className=\"statsScripts_number\">Number of running Scripts</div>\r\n          <div className=\"statsScripts_number_TOTAL\">3</div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={3}>\r\n        <div className=\"statsIssues\">\r\n          <div className=\"statsIssues_number\">FAILED Scripts</div>\r\n          <div className=\"statsIssues_number_TOTAL\">0</div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <div className=\"statsChart1\">\r\n          <div className=\"statsIssues_number\">Uptime:</div>\r\n          <div className=\"statsIssues_number_TOTAL\">100%</div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={8}>\r\n        <div className=\"statsChart2\">\r\n          <div className=\"statsIssues_number\">Latest logs:</div>\r\n          <div className=\"container_tabel\">\r\n            <div className=\"ID\">ID</div>\r\n            <div className=\"ScriptName\">Name</div>\r\n            <div className=\"Status\">Status</div>\r\n            <div className=\"Error\">Error</div>\r\n            <div className=\"Elapsed\">Elapsed</div>\r\n            <div className=\"RunTime\">Run Time</div>\r\n          </div>\r\n          <div className=\"container_tranzactii\">\r\n            <GetData />\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n\r\n      <Grid item md={4}>\r\n        <div className=\"statsChart4\">\r\n          <div className=\"statsIssues_number\">Errors by Browser, System:</div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item md={12}>\r\n        <div className=\"DATA\">Filter by Other:</div>\r\n        <HugeData />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\screens\\TestPrivateScreen.js",["97","98","99","100","101"],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport FilterV2 from \"../pages/FilterV2\";\r\n\r\nconst PrivateScreen = ({ history }) => {\r\n  const [error, setError] = useState(\"\");\r\n  const [privateData, setPrivateData] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n      history.push(\"login\");\r\n    }\r\n\r\n    const fetchPrivateDate = async () => {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.get(\"/api/private\", config);\r\n        setPrivateData(data.data);\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        setError(\"You are not authorized please login\");\r\n      }\r\n    };\r\n\r\n    fetchPrivateDate();\r\n  }, [history]);\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"authToken\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  const [status, setStatus] = useState(true);\r\n\r\n  // console.log(status);\r\n  return error ? (\r\n    <span classNameName=\"error-message\">{error}</span>\r\n  ) : (\r\n    <>\r\n      <div style={{ background: \"green\", color: \"white\" }}>{privateData}</div>\r\n      <FilterV2 />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateScreen;\r\n","C:\\Users\\acsoa\\Desktop\\dashboard\\client\\src\\components\\dropdownbutton\\button.js",[],["102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":21},{"ruleId":"108","severity":1,"message":"112","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":22},{"ruleId":"108","severity":1,"message":"113","line":12,"column":10,"nodeType":"110","messageId":"111","endLine":12,"endColumn":15},{"ruleId":"108","severity":1,"message":"114","line":12,"column":17,"nodeType":"110","messageId":"111","endLine":12,"endColumn":25},{"ruleId":"108","severity":1,"message":"115","line":43,"column":9,"nodeType":"110","messageId":"111","endLine":43,"endColumn":23},{"ruleId":"108","severity":1,"message":"116","line":56,"column":9,"nodeType":"110","messageId":"111","endLine":56,"endColumn":16},{"ruleId":"108","severity":1,"message":"117","line":4,"column":5,"nodeType":"110","messageId":"111","endLine":4,"endColumn":10},{"ruleId":"108","severity":1,"message":"118","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":14},{"ruleId":"108","severity":1,"message":"117","line":3,"column":5,"nodeType":"110","messageId":"111","endLine":3,"endColumn":10},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"108","severity":1,"message":"121","line":414,"column":11,"nodeType":"110","messageId":"111","endLine":414,"endColumn":16},{"ruleId":"108","severity":1,"message":"122","line":415,"column":11,"nodeType":"110","messageId":"111","endLine":415,"endColumn":36},{"ruleId":"108","severity":1,"message":"123","line":4,"column":16,"nodeType":"110","messageId":"111","endLine":4,"endColumn":23},{"ruleId":"108","severity":1,"message":"124","line":6,"column":10,"nodeType":"110","messageId":"111","endLine":6,"endColumn":20},{"ruleId":"108","severity":1,"message":"113","line":8,"column":10,"nodeType":"110","messageId":"111","endLine":8,"endColumn":15},{"ruleId":"108","severity":1,"message":"114","line":8,"column":17,"nodeType":"110","messageId":"111","endLine":8,"endColumn":25},{"ruleId":"108","severity":1,"message":"125","line":34,"column":9,"nodeType":"110","messageId":"111","endLine":34,"endColumn":22},{"ruleId":"108","severity":1,"message":"126","line":39,"column":10,"nodeType":"110","messageId":"111","endLine":39,"endColumn":16},{"ruleId":"108","severity":1,"message":"127","line":39,"column":18,"nodeType":"110","messageId":"111","endLine":39,"endColumn":27},{"ruleId":"104","replacedBy":"128"},{"ruleId":"106","replacedBy":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'PrivateScreen' is defined but never used.","Identifier","unusedVar","'FilterPastData' is defined but never used.","'input' is assigned a value but never used.","'setInput' is assigned a value but never used.","'handleKeyPress' is assigned a value but never used.","'options' is assigned a value but never used.","'axios' is assigned a value but never used.","'moment' is defined but never used.",["130"],["131"],"'value' is assigned a value but never used.","'getInputTextFromSearchBox' is assigned a value but never used.","'Divider' is defined but never used.","'makeStyles' is defined but never used.","'logoutHandler' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.",["130"],["131"],"no-global-assign","no-unsafe-negation"]